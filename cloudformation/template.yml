AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for PHP Hello World with VPC, EC2, S3, and DynamoDB'

Parameters:
  AccountId:
    Type: String
    Description: AWS Account ID
  TempBucketName:
    Type: String
    Description: Name of the temporary S3 bucket

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: PIN_VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PIN_VPC_Subnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PIN_Public_Route_Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebServerSecurityGroup
      GroupDescription: Allow HTTP and SSH access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  
  WebServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: S3BucketAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: 
                  - !Sub "arn:aws:s3:::${WebsiteBucket}"
                  - !Sub "arn:aws:s3:::${WebsiteBucket}/*"
                  - !Sub "arn:aws:s3:::${TempBucketName}"
                  - !Sub "arn:aws:s3:::${TempBucketName}/*"
  
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles: 
        - !Ref WebServerRole

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'pin-bucket-${AccountId}'

  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-00402f0bdf4996822
      InstanceType: t2.micro
      KeyName: christian_key_aws
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - !Ref WebServerSecurityGroup
          SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Configurar logging
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          echo "Iniciando configuración del servidor..."
          # Actualizar e instalar AWS CLI
          sudo apt-get update
          sudo apt-get install -y awscli
          echo "AWS CLI instalado."
          # Copiar scripts desde el bucket temporal
          aws s3 cp s3://${TempBucketName}/install_apache.sh /tmp/
          aws s3 cp s3://${TempBucketName}/mount_s3.sh /tmp/
          aws s3 cp s3://${TempBucketName}/index.php /tmp/
          echo "Scripts copiados desde S3."
          # Dar permisos de ejecución a los scripts
          chmod +x /tmp/install_apache.sh
          chmod +x /tmp/mount_s3.sh
          echo "Permisos de ejecución otorgados a los scripts."
          # Ejecutar scripts
          echo "Ejecutando install_apache.sh..."
          /tmp/install_apache.sh
          if [ $? -ne 0 ]; then
            echo "Error al ejecutar install_apache.sh"
          else
            echo "install_apache.sh ejecutado con éxito."
          fi
          echo "Ejecutando mount_s3.sh..."
          /tmp/mount_s3.sh ${WebsiteBucket}
          if [ $? -ne 0 ]; then
            echo "Error al ejecutar mount_s3.sh"
          else
            echo "mount_s3.sh ejecutado con éxito."
          fi
          # Copiar index.php al directorio web
          sudo cp /tmp/index.php /var/www/html/
          echo "index.php copiado al directorio web."
          # Señalizar que la configuración se ha completado
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
          echo "Configuración del servidor completada."
      IamInstanceProfile: !Ref WebServerInstanceProfile

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MyTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

Outputs:
  WebsiteURL:
    Description: URL for website hosted on EC2
    Value: !Sub 'http://${WebServerInstance.PublicDnsName}'
  WebsiteBucketName:
    Description: Name of the S3 bucket for the website
    Value: !Ref WebsiteBucket